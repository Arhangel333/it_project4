stages:
  - test
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"

# üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
unit_tests:
  stage: test
  image: python:3.11
  before_script:
    - pip install -r requirements.txt
  script:
    - pytest tests/ -v
  only:
    - main
    - merge_requests

# üê≥ –°–ë–û–†–ö–ê DOCKER –û–ë–†–ê–ó–ê
build_image:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache docker-cli
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# üöÄ –î–ï–ü–õ–û–ô (–±–æ–Ω—É—Å - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker pull $CI_REGISTRY_IMAGE:latest &&
        docker-compose -f /path/to/your/project/docker-compose.yml up -d
      "
  only:
    - main
  when: manual  # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è