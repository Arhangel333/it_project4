import pytest
from app.main import tasks_db

# üß™ –¢–ï–°–¢ 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def test_read_root(client):
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Task Manager API —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏!"}

# üß™ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
def test_create_task(client):
    task_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        "description": "–≠—Ç–æ —Ç–µ—Å—Ç",
        "completed": False
    }
    
    response = client.post("/tasks/", json=task_data)
    
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
    assert data["description"] == "–≠—Ç–æ —Ç–µ—Å—Ç"
    assert data["completed"] == False
    assert "id" in data
    assert data["id"] == 1  # –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞

# üß™ –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
def test_get_tasks(client):
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    client.post("/tasks/", json={"title": "–ó–∞–¥–∞—á–∞ 1"})
    client.post("/tasks/", json={"title": "–ó–∞–¥–∞—á–∞ 2"})
    
    response = client.get("/tasks/")
    assert response.status_code == 200
    data = response.json()
    assert len(data) == 2
    assert data[0]["title"] == "–ó–∞–¥–∞—á–∞ 1"
    assert data[1]["title"] == "–ó–∞–¥–∞—á–∞ 2"

# üß™ –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
def test_get_task(client):
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    create_response = client.post("/tasks/", json={"title": "–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞"})
    task_id = create_response.json()["id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –µ—ë –ø–æ ID
    response = client.get(f"/tasks/{task_id}")
    assert response.status_code == 200
    assert response.json()["title"] == "–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞"

# üß™ –¢–ï–°–¢ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
def test_get_nonexistent_task(client):
    response = client.get("/tasks/999")
    assert response.status_code == 404
    assert "not found" in response.json()["detail"].lower()

# üß™ –¢–ï–°–¢ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def test_update_task(client):
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    create_response = client.post("/tasks/", json={"title": "–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"})
    task_id = create_response.json()["id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º
    update_data = {"title": "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "completed": True}
    response = client.put(f"/tasks/{task_id}", json=update_data)
    
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
    assert data["completed"] == True

# üß™ –¢–ï–°–¢ 7: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def test_delete_task(client):
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    create_response = client.post("/tasks/", json={"title": "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è"})
    task_id = create_response.json()["id"]
    
    # –£–¥–∞–ª—è–µ–º
    response = client.delete(f"/tasks/{task_id}")
    assert response.status_code == 200
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–∏–ª–∞—Å—å
    get_response = client.get(f"/tasks/{task_id}")
    assert get_response.status_code == 404

# üß™ –¢–ï–°–¢ 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
def test_get_stats(client):
    # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    client.post("/tasks/", json={"title": "–ó–∞–¥–∞—á–∞ 1", "completed": True})
    client.post("/tasks/", json={"title": "–ó–∞–¥–∞—á–∞ 2", "completed": False})
    
    response = client.get("/stats/")
    assert response.status_code == 200
    data = response.json()
    assert data["total_tasks"] == 2
    assert data["completed_tasks"] == 1
    assert data["pending_tasks"] == 1
    assert data["completion_rate"] == "50.0%"

# üß™ –¢–ï–°–¢ 9: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—à–∏–±–∫–∞)
def test_create_task_validation_error(client):
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ—Ç title
    invalid_data = {
        "description": "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"  # –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ title!
    }
    
    response = client.post("/tasks/", json=invalid_data)
    assert response.status_code == 422  # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

# üß™ –¢–ï–°–¢ 10: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
def test_filter_tasks(client):
    client.post("/tasks/", json={"title": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è", "completed": True})
    client.post("/tasks/", json={"title": "–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è", "completed": False})
    
    # –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    response = client.get("/tasks/?completed=true")
    assert response.status_code == 200
    data = response.json()
    assert len(data) == 1
    assert data[0]["title"] == "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"
    
    # –¢–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    response = client.get("/tasks/?completed=false")
    assert response.status_code == 200
    data = response.json()
    assert len(data) == 1
    assert data[0]["title"] == "–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"